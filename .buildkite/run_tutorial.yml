agents:
  queue: "juliaecosystem"
  sandbox.jl: true
  arch: "x86_64"

# This is a pipeline that weaves a tutorial, then uploads the resultant
# .PDF and other reports as (buildkite, not Julia) artifacts.  The `coppermind`
# configuration memoizes the result, so that identical inputs don't get
# weaved multiple times.
steps:
  - label: ":hammer: {PATH}"
    key: "tutorial-{SANITIZED_PATH}"
    env:
      BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET: ${BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET?}
    plugins:
      - staticfloat/cryptic#v2:
          variables:
            - BUILDKITE_S3_ACCESS_KEY_ID="U2FsdGVkX1/ckce1vUF8A17rHLxcAlAou4aokaeS8YL6omsA1Vq1IDZko5cL1Z+t"
            - BUILDKITE_S3_SECRET_ACCESS_KEY="U2FsdGVkX1+SPF81nkK7KQ64DsafSl0qq2iG7BsQs1xlTYEtZV3MqQl3l/NWaiocaEywZZFbAB5zpnKPD0xHTQ=="
            - BUILDKITE_S3_DEFAULT_REGION="U2FsdGVkX1/cORlxhXcxhja2JkqC0f8RmaGYxvGBbEg="
      - JuliaCI/julia#v1:
          version: 1.8
      - staticfloat/sandbox:
          rootfs_url: "https://jc-rootfs-images.s3.amazonaws.com/aws_uploader-2021-11-12.x86_64.tar.gz"
          rootfs_treehash: "986217e5b36efd3b3b91ed90df8e36d628cf543f"
          workspaces:
            # Include the julia we just downloaded
            - "/cache/julia-buildkite-plugin:/cache/julia-buildkite-plugin"
      - staticfloat/coppermind:
          inputs:
            # We are sensitive to the actual tutorial changing
            - {PATH}
            # We are sensitive to the source code of this package changing
            - src/**/*.jl
            # We are sensitive to our overall dependencies changing
            - ./*.toml
          outputs:
            #- html/**/*.html
            - markdown/**/figures/*.png
            - markdown/**/*.md
            - notebook/**/*.ipynb
            - pdf/**/*.pdf
            - script/**/*.jl
          s3_prefix: s3://julialang-buildkite-artifacts/scimltutorials
    timeout_in_minutes: 1000
    commands: |
      # Instantiate, to install the overall project dependencies
      echo "--- Instantiate"
      julia --project=. -e 'using Pkg; Pkg.instantiate(); Pkg.build()'

      # Run tutorial
      echo "+++ Run tutorial for {PATH}"
      julia --project=. weave_tutorials.jl "{PATH}"

  - label: ":rocket: Publish {PATH}"
    env:
      BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET: ${BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET?}
    plugins:
      - staticfloat/cryptic#v2:
          variables:
            - BUILDKITE_S3_ACCESS_KEY_ID="U2FsdGVkX1/ckce1vUF8A17rHLxcAlAou4aokaeS8YL6omsA1Vq1IDZko5cL1Z+t"
            - BUILDKITE_S3_SECRET_ACCESS_KEY="U2FsdGVkX1+SPF81nkK7KQ64DsafSl0qq2iG7BsQs1xlTYEtZV3MqQl3l/NWaiocaEywZZFbAB5zpnKPD0xHTQ=="
            - BUILDKITE_S3_DEFAULT_REGION="U2FsdGVkX1/cORlxhXcxhja2JkqC0f8RmaGYxvGBbEg="
          files:
            - .buildkite/ssh_deploy.key
      - JuliaCI/julia#v1:
          version: 1.8
      - staticfloat/sandbox:
          rootfs_url: "https://jc-rootfs-images.s3.amazonaws.com/aws_uploader-2021-11-12.x86_64.tar.gz"
          rootfs_treehash: "986217e5b36efd3b3b91ed90df8e36d628cf543f"
          workspaces:
            # Include the julia we just downloaded
            - "/cache/julia-buildkite-plugin:/cache/julia-buildkite-plugin"
      # Use coppermind to download the tutorial results that were calculated in the
      # weaving job above.  Note we still list `outputs` here, since we have the
      # option to extract only a subset of them here.
      - staticfloat/coppermind:
          input_from: "tutorial-{SANITIZED_PATH}"
          outputs:
            #- html/**/*.html
            - markdown/**/figures/*.png
            - markdown/**/*.md
            - notebook/**/*.ipynb
            - pdf/**/*.pdf
            - script/**/*.jl
          s3_prefix: s3://julialang-buildkite-artifacts/scimltutorials
      - staticfloat/ssh-agent:
          keyfiles:
            - .buildkite/ssh_deploy.key
    commands: .buildkite/publish_tutorials_output.sh
    # Don't run this unless we're on the master branch, and not until the actual weave
    # command has had a chance to run.
    depends_on: "tutorial-{SANITIZED_PATH}"
    branches: "master"
